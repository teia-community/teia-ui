pcre_jit on;
env IMGPROXY_KEY;
env IMGPROXY_SALT;
env VITE_IMGPROXY;
env VITE_TEIA_GRAPHQL_API;
env IPFS_GATEWAY;

events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;
    keepalive_timeout  65;

    resolver 1.1.1.1 ipv6=off;
    server_tokens off;
    lua_package_path '/lua/?.lua;;';

    upstream rpc_nodes {
        server 127.0.0.1:8081;
        server 127.0.0.1:8086;
        server 127.0.0.1:8082 backup;
        server 127.0.0.1:8084 backup;
        server 127.0.0.1:8085 backup;
    }

    # the size depends on the number of servers in upstream {}:
    lua_shared_dict healthcheck 1m;

    lua_socket_log_errors off;

    init_worker_by_lua_block {
        local hc = require "resty.upstream.healthcheck"

        local ok, err = hc.spawn_checker{
            shm = "healthcheck",  -- defined by "lua_shared_dict"
            upstream = "rpc_nodes", -- defined by "upstream"
            type = "http", -- support "http" and "https"

            http_req = "GET /healthcheck HTTP/1.0\r\n\r\n",
                    -- raw HTTP request for checking

            port = nil,  -- the check port, it can be different than the original backend server port, default means the same as the original backend server
            interval = 10000,  -- run the check cycle every 10 sec
            timeout = 1000,   -- 1 sec is the timeout for network operations
            fall = 3,  -- # of successive failures before turning a peer down
            rise = 2,  -- # of successive successes before turning a peer up
            valid_statuses = {200, 204},  -- a list valid HTTP status code
            concurrency = 10,  -- concurrency level for test requests
        }

        if not ok then
            ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
            return
        end
    }

    server {
        listen 80 default;
        index index.html index.htm index.nginx-debian.html;
        gzip              on;
        gzip_vary         on;
        gzip_types        # text/html is always compressed by HttpGzipModule
                            text/css
                            application/javascript
                            font/truetype
                            font/opentype
                            application/vnd.ms-fontobject
                            image/svg+xml;
        gzip_min_length   1000; # default is 20 bytes
        gzip_buffers      16 8k;
        gzip_comp_level   2; # default is 1

        tcp_nopush                on; # send headers in one piece
        tcp_nodelay               on; # don't buffer data sent, good for small data bursts in real time

        root /usr/local/openresty/nginx/html;
        include /header.conf;

        expires 30d;
        add_header Pragma "public";
        add_header Cache-Control "public";
        charset utf-8;

        location = /favicon.ico {
            root /usr/local/openresty/nginx/html/icons;
        }

        location = /index.html {
            include /header.conf;
            add_header Cache-Control no-store always;
        }

        location / {
            include /header.conf;
            add_header Cache-Control no-store always;
            try_files $uri $uri/ /index.html =404;
        }

        proxy_ssl_server_name on;
        proxy_pass_request_headers off;

        location ^~ /teztok/ {
            internal; # Specifies that a given location can only be used for internal requests
            proxy_set_header Content-Type "application/json";
            proxy_set_header Accept "application/json";
            set_by_lua_block $teztok_endpoint {
                return os.getenv("VITE_TEIA_GRAPHQL_API")
            }
            proxy_pass $teztok_endpoint;
        }

        location ^~ /teia/ {
            internal;
            proxy_pass http://127.0.0.1:8080/; # trailing slash
        }

        location ~ "^/objkt/([0-9]+)" {
            default_type text/html;
            header_filter_by_lua_block { ngx.header.content_length = nil }
            content_by_lua_block {
                local res = ngx.location.capture('/teia' .. ngx.var.uri)
                local body = res.body
                local previews = require "previews"
                local ok, content = pcall(previews.findTokenDetails, ngx.var[1])
                if ok and content then
                    body = previews.injectOpenGraphTags(body, content)
                end
                ngx.print(body)
            }
            include /header.conf;
        }

        location ~ "^/tz/(tz[a-zA-Z0-9]{34})" {
            default_type text/html;
            header_filter_by_lua_block { ngx.header.content_length = nil }
            content_by_lua_block {
                local res = ngx.location.capture('/teia' .. ngx.var.uri)
                local body = res.body
                local previews = require "previews"
                local ok, content = pcall(previews.findProfileDetails, ngx.var[1])
                if ok and content then
                    body = previews.injectOpenGraphTags(body, content)
                end
                ngx.print(body)
            }
            include /header.conf;
        }

        location ~ "^/([0-9a-zA-Z\-_\ \.]+)" {
            header_filter_by_lua_block {
                ngx.header.content_length = nil
                ngx.header.content_type = "text/html"
            }
            content_by_lua_block {
                local res = ngx.location.capture('/teia' .. ngx.var.uri)
                local body = res.body
                local previews = require "previews"
                local ok, content = pcall(previews.findProfileDetails, ngx.var[1])
                if ok and content then
                    body = previews.injectOpenGraphTags(body, content)
                end
                ngx.print(body)
            }
            include /header.conf;
        }

        location ^~ /static/ {}
        location ^~ /assets/ {}
        location ^~ /icons/ {
            default_type  application/json;
        }

        location ^~ /rpc/ {
            add_header Cache-Control no-store always;
            add_header Pragma "no-cache";
            proxy_pass http://tzproxy:8080/;
        }

        location = /status {
            default_type text/plain;
            content_by_lua_block {
                local hc = require "resty.upstream.healthcheck"
                ngx.say("Nginx Worker PID: ", ngx.worker.pid())
                ngx.print(hc.status_page())
            }
        }
    }

    server {
        listen 0.0.0.0:8000;
        access_log off;
        location / {
            proxy_pass http://rpc_nodes/;
        }
    }

    server {
        listen 8080;
        root /usr/local/openresty/nginx/html;
        include /header.conf;
        access_log off;
        location / {
            add_header Cache-Control no-store always;
            add_header Pragma "no-cache";
            include /header.conf;
            try_files $uri $uri/ /index.html =404;
        }
    }

    server {
        listen 127.0.0.1:8081;
        include /shared.conf;
        location / {
            proxy_pass https://mainnet.teia.rocks/;
            add_header x-backend-rpc-node https://mainnet.teia.rocks/;
        }
    }

    server {
        listen 127.0.0.1:8082;
        include /shared.conf;
        location / {
            proxy_pass https://rpc.tzkt.io/mainnet/;
            add_header x-backend-rpc-node https://rpc.tzkt.io/mainnet/;
        }
    }

    server {
        listen 127.0.0.1:8084;
        include /shared.conf;
        location / {
            proxy_pass https://mainnet.api.tez.ie/;
            add_header x-backend-rpc-node https://mainnet.api.tez.ie/;
        }
    }

    server {
        listen 127.0.0.1:8085;
        include /shared.conf;
        location / {
            proxy_pass https://mainnet.ecadinfra.com/;
            add_header x-backend-rpc-node https://mainnet.ecadinfra.com/;
        }
    }

    server {
        listen 127.0.0.1:8086;
        include /shared.conf;
        location / {
            proxy_pass https://tezos.ziroh.be/;
            add_header x-backend-rpc-node https://tezos.ziroh.be/;
        }
    }
}
